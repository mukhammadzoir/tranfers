import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from get_num import get_binance_avr_rates

API_TOKEN = '6130803945:AAE26K43qBVYjVyoMHnm1-yKYSHYAfGZcJ0'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

button1 = KeyboardButton('–ö—É—Ä—Å')

button2 = KeyboardButton('–£—Å–ª–æ–≤–∏—è')

keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard.add(button1).add(button2)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply(
        "üí≤–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –≤ –†–æ—Å—Å–∏—é –∏ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.üí≤",
        reply_markup=keyboard)


@dp.message_handler(Text("–ö—É—Ä—Å"))
async def process_hi1_command(message: types.Message):
    usdt_rub_buy = float(get_binance_avr_rates())
    usdt_rub_sell = float(get_binance_avr_rates(type="SELL"))
    usdt_kgs_buy = float(get_binance_avr_rates(fiat='KZT', pay='KaspiBank'))
    usdt_kgs_sell = float(get_binance_avr_rates(fiat='KZT', type="SELL", pay='KaspiBank'))
    comission = 3.5
    comission_r = comission / 100
    my_rate_kg = usdt_kgs_sell / usdt_rub_buy
    my_rate_ru = usdt_kgs_buy / usdt_rub_sell
    client_rate_kg = (my_rate_kg) - (my_rate_kg * comission_r)
    client_rate_ru = (my_rate_ru) + (my_rate_ru * comission_r)
    await message.reply(
        f"–ö—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ KZ: {round(client_rate_kg, 4)}\n–ö—É—Ä—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –†–§: {round(client_rate_ru, 3)}\nüìû–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @M_T_B_vendur")


@dp.message_handler(Text("–£—Å–ª–æ–≤–∏—è"))
async def with_puree(message: types.Message):
    await message.reply(
        "ü™™–§.–ò.–û –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –§.–ò.–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è,  –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –±–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. üí≥\nüíµ—Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞üíµ\nüíé–ö–∞–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥?üíé\n–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –¥–µ–Ω–µ–≥ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã ( –∫—É—Ä—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º)\nü™ô–ü–µ—Ä–µ–≤–æ–¥—ã —Å–æ–≤–µ—Ä—à–∞—é—Ç—Å—è –æ—Ç 1000 —Ä—É–±–ª–µ–π –∏–ª–∏ 5000 —Ç–µ–Ω–≥–µü™ô",
        reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
